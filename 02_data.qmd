```{r setup}
#| message: false
#| include: false
library(tidyverse)
library(DT)
library(sf)
library(terra)
```

# Data

All data needed for the analyses.

## Gathered

The raw information needed would be number of individual per hectare, per site, per census/year, per plot, per species, and per cohort/diameter class with maybe an information on the plot area to later weigh the information

### Paracou

```{r parprep}
#| eval: false
paracou <- list.files("data/harmonized_datasets_ss", 
                      full.names = TRUE, pattern = "paracou") %>% 
  lapply(read_csv, 
         col_types = cols(TreeFieldNum = col_character(),
                          IdTree = col_character(),
                          TreeFieldNumOriginal = col_character(),
                          Site = col_character()
                          )) %>% 
  bind_rows() %>% 
  filter(LifeStatus) %>% 
  select(Site, Year, Plot, PlotArea, Family, Genus, Species, Diameter) %>% 
  mutate(diameter_class = ifelse(Diameter < 30, 10, 30)) %>% 
  mutate(diameter_class = ifelse(Diameter < 80, diameter_class, 80)) %>% 
  group_by(Site, Year, Plot, PlotArea, Family, Genus, Species, diameter_class) %>% 
  summarise(abundance = n()/unique(PlotArea),
            ba = sum((Diameter/2)^2*pi)/10^4/unique(PlotArea)) %>%
  ungroup() %>% 
  rename_all(tolower) %>% 
  rename(area = plotarea) %>% 
  mutate(genus = gsub("Indet.", "", genus)) %>% 
  mutate(species = gsub("Indet.", "undet", species)) %>% 
  mutate(treatment = ifelse(plot %in% c(1,6,11,13:15), "control", "logged")) %>% 
  mutate(rel_year = year - 1986) %>% 
  filter(paste(plot, year) != "15 2010")
delta_ba <- paracou %>% 
  group_by(plot, rel_year) %>% 
  summarise(ba = sum(ba)) %>% 
  filter(rel_year < 6) %>% 
  group_by(plot, post = as.numeric(rel_year > 0)) %>% 
  summarise(ba_mean = mean(ba), ba_min = min(ba)) %>% 
  gather(metric, value, -plot, -post) %>% 
  mutate(metric = paste0(metric, "_", post)) %>% 
  select(-post) %>% 
  pivot_wider(names_from = metric, values_from = value) %>% 
  mutate(delta_ba = ba_mean_0 - ba_min_1) %>% 
  mutate(delta_ba = ifelse(delta_ba < 1, 0, delta_ba)) %>% 
  mutate(delta_ba_pct = delta_ba/ba_mean_0*100) %>% 
  rename(ba_pre = ba_mean_0, ba_post = ba_min_1) %>% 
  select(plot, ba_pre, ba_post, delta_ba, delta_ba_pct)
paracou <- paracou %>% 
  left_join(delta_ba) %>% 
  mutate_at(c("delta_ba", "delta_ba_pct"), ~ ifelse(is.na(.), 0, .))
write_tsv(paracou, "outputs/paracou.tsv")
```

```{r parissue}
#| message: false
#| warning: false
#| fig-cap: "Caption."
list.files("data/harmonized_datasets_ss", 
                      full.names = TRUE, pattern = "paracou") %>% 
  lapply(read_csv, 
         col_types = cols(TreeFieldNum = col_character(),
                          IdTree = col_character(),
                          TreeFieldNumOriginal = col_character(),
                          Site = col_character()
                          )) %>% 
  bind_rows() %>% 
  filter(Plot == 15, Year == 2010) %>% 
  ggplot(aes(XTreeUTM, YTreeUTM)) +
  geom_point() +
  theme_bw() +
  coord_fixed() +
  ggtitle("Paracou Plot 15", "2010")
```

```{r parplot}
#| message: false
#| warning: false
#| fig-cap: "Caption."
read_tsv("outputs/paracou.tsv") %>% 
  group_by(site, year, rel_year, treatment, delta_ba, plot) %>% 
  summarise(ba = sum(ba)) %>% 
  ggplot(aes(rel_year, ba, col = delta_ba, group = plot)) +
  geom_line() +
  geom_point() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed") +  
  xlab("") + 
  ylab(expression("Basal area of tree " >=10 ~"cm dbh ["~m^{2}~ha^{-~1}~"]")) +
  scale_color_viridis_c(expression(Delta[BA]))
```

### Missiones

```{r missionesprep}
#| eval: false
missiones <- read_csv("data/harmonized_datasets_ss/output_MISIONES.csv") %>% 
  filter(LifeStatus) %>% 
  filter(!(Family %in% c("muerto", "ND"))) %>% 
  select(Site, Year, Plot, PlotArea, Family, ScientificName, Diameter) %>% 
  mutate(Family = gsub("No determinado", "undet", Family)) %>% 
  mutate(ScientificName = gsub("No Determinado", "undet undet", ScientificName)) %>% 
  separate(ScientificName, c("Genus", "Species")) %>% 
  mutate(Species = ifelse(is.na(Species), "undet", Species)) %>%  
  mutate(Year = ifelse(Year == 2018, 2019, Year)) %>% 
  mutate(diameter_class = ifelse(Diameter < 30, 10, 30)) %>% 
  mutate(diameter_class = ifelse(Diameter < 80, diameter_class, 80)) %>% 
  filter(!is.na(diameter_class)) %>% 
  group_by(Site, Year, Plot, PlotArea, Family, Genus, Species, diameter_class) %>% 
  summarise(abundance = n()/unique(PlotArea),
            ba = sum((Diameter/2)^2*pi)/10^4/unique(PlotArea)) %>%
  rename_all(tolower) %>% 
  rename(area = plotarea) %>% 
  mutate(rel_year = year - 1999)
delta_ba <- missiones %>% 
  group_by(plot, rel_year) %>% 
  summarise(ba = sum(ba)) %>% 
  filter(rel_year < 6) %>% 
  group_by(plot, post = as.numeric(rel_year > 0)) %>% 
  summarise(ba_mean = mean(ba), ba_min = min(ba)) %>% 
  gather(metric, value, -plot, -post) %>% 
  mutate(metric = paste0(metric, "_", post)) %>% 
  select(-post) %>% 
  pivot_wider(names_from = metric, values_from = value) %>% 
  mutate(delta_ba = ba_mean_0 - ba_min_1) %>% 
  mutate(delta_ba = ifelse(delta_ba < 1, 0, delta_ba)) %>% 
  mutate(delta_ba_pct = delta_ba/ba_mean_0*100) %>% 
  rename(ba_pre = ba_mean_0, ba_post = ba_min_1) %>% 
  select(plot, ba_pre, ba_post, delta_ba, delta_ba_pct)
missiones <- missiones %>% 
  left_join(delta_ba) %>% 
  mutate_at(c("delta_ba", "delta_ba_pct"), ~ ifelse(is.na(.), 0, .))
write_tsv(missiones, "outputs/missiones.tsv")
```

```{r missplot}
#| message: false
#| warning: false
#| fig-cap: "Caption."
read_tsv("outputs/missiones.tsv") %>% 
  group_by(site, year, rel_year, delta_ba, plot) %>% 
  summarise(ba = sum(ba)) %>% 
  ggplot(aes(rel_year, ba, col = delta_ba, group = plot)) +
  geom_line() +
  geom_point() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed") +  
  xlab("") + 
  ylab(expression("Basal area of tree " >=10 ~"cm dbh ["~m^{2}~ha^{-~1}~"]")) +
  scale_color_viridis_c(expression(Delta[BA]))
```

### Moju

```{r mojuprep}
#| eval: false
moju <- read_csv("data/harmonized_datasets_ss/output_moju.csv", 
              locale = readr::locale(encoding = "latin1")) %>% 
  mutate(Site = 'Moju') %>% 
  filter(LifeStatus) %>% 
  select(Site, Year, Plot, PlotArea, VernName, Diameter) %>% 
  separate(VernName, c("VernName", "GenusSpecies"), sep = "\\[") %>% 
  select(-VernName) %>% 
  mutate(GenusSpecies = gsub("]", "", GenusSpecies)) %>% 
  separate(GenusSpecies, c("Genus", "Species")) %>% 
  mutate(Species = ifelse(Genus == "", 'undet', Species)) %>% 
  mutate(Genus = ifelse(Genus == "", 'undet', Genus)) %>% 
  mutate(diameter_class = ifelse(Diameter < 30, 10, 30)) %>% 
  mutate(diameter_class = ifelse(Diameter < 80, diameter_class, 80)) %>% 
  filter(!is.na(diameter_class)) %>% 
  group_by(Site, Year, Plot, PlotArea, Genus, Species, diameter_class) %>% 
  summarise(abundance = n()/unique(PlotArea),
            ba = sum((Diameter/2)^2*pi)/10^4/unique(PlotArea)) %>%
  rename_all(tolower) %>% 
  rename(area = plotarea) %>% 
  mutate(rel_year = year - 1997)
delta_ba <- moju %>% 
  group_by(plot, rel_year) %>% 
  summarise(ba = sum(ba)) %>% 
  filter(rel_year < 6) %>% 
  group_by(plot, post = as.numeric(rel_year > 0)) %>% 
  summarise(ba_mean = mean(ba), ba_min = min(ba)) %>% 
  gather(metric, value, -plot, -post) %>% 
  mutate(metric = paste0(metric, "_", post)) %>% 
  select(-post) %>% 
  pivot_wider(names_from = metric, values_from = value) %>% 
  mutate(delta_ba = ba_mean_0 - ba_min_1) %>% 
  mutate(delta_ba = ifelse(delta_ba < 1, 0, delta_ba)) %>% 
  mutate(delta_ba_pct = delta_ba/ba_mean_0*100) %>% 
  rename(ba_pre = ba_mean_0, ba_post = ba_min_1) %>% 
  select(plot, ba_pre, ba_post, delta_ba, delta_ba_pct)
moju <- moju %>% 
  left_join(delta_ba) %>% 
  mutate_at(c("delta_ba", "delta_ba_pct"), ~ ifelse(is.na(.), 0, .))
write_tsv(moju, "outputs/moju.tsv")
```

```{r mojplot}
#| message: false
#| warning: false
#| fig-cap: "Caption."
read_tsv("outputs/moju.tsv") %>% 
  group_by(site, year, rel_year, delta_ba, plot) %>% 
  summarise(ba = sum(ba)) %>% 
  ggplot(aes(rel_year, ba, col = delta_ba, group = plot)) +
  geom_line() +
  geom_point() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed") +  
  xlab("") + 
  ylab(expression("Basal area of tree " >=10 ~"cm dbh ["~m^{2}~ha^{-~1}~"]")) +
  scale_color_viridis_c(expression(Delta[BA]))
```

### All

```{r allprep}
#| eval: false
bind_rows(
  read_tsv("outputs/paracou.tsv"),
  read_tsv("outputs/missiones.tsv"),
  read_tsv("outputs/moju.tsv")
) %>% write_tsv("outputs/gathered.tsv")
```

```{r allplot}
#| message: false
#| warning: false
#| fig-cap: "Caption."
read_tsv("outputs/gathered.tsv") %>% 
  group_by(site, year, rel_year, delta_ba, plot) %>% 
  summarise(ba = sum(ba)) %>% 
  ggplot(aes(rel_year, ba, col = delta_ba, group = paste(site, plot))) +
  geom_line() +
  geom_point() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed") +  
  xlab("") + 
  ylab(expression("Basal area of tree " >=10 ~"cm dbh ["~m^{2}~ha^{-~1}~"]")) +
  scale_color_viridis_c(expression(Delta[BA]))
```

```{r allplotrel}
#| message: false
#| warning: false
#| fig-cap: "Caption."
read_tsv("outputs/gathered.tsv") %>% 
  group_by(site, year, rel_year, delta_ba, ba_pre, plot) %>% 
  summarise(ba = sum(ba)) %>% 
  ggplot(aes(rel_year, ba/ba_pre*100, 
             col = delta_ba/ba_pre*100, 
             group = paste(site, plot))) +
  geom_line() +
  geom_point() +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed") +  
  xlab("") + 
  ylab(expression("Relative basal area of tree " >=10 ~"cm dbh ["~"%"~"]")) +
  scale_color_viridis_c(expression(Delta[BA]))
```

## Diversity

Species richness, Shannon, Simpson

```{r diversity}
#| eval: false
read_tsv("outputs/gathered.tsv") %>% 
  group_by(site, rel_year, plot, area, delta_ba, diameter_class) %>% 
  summarise(richness = n(),
            shannon = vegan::diversity(abundance, index = "shannon"),
            simpson = vegan::diversity(abundance, index = "simpson")) %>% 
  gather(metric, value, -site, -rel_year, -plot, -area, -delta_ba, -diameter_class) %>% 
  write_tsv("outputs/neutral_metrics.tsv")
```

```{r}
#| message: false
#| warning: false
read_tsv("outputs/neutral_metrics.tsv") %>% 
  filter(metric == "richness") %>% 
  group_by(site, rel_year, plot, delta_ba) %>% 
  summarise(richness = sum(value)) %>% 
  group_by(site, plot, delta_ba) %>% 
  mutate(richness_pre = mean(ifelse(rel_year < 1, richness, NA), na.rm = T)) %>% 
  mutate(rel_richness = (richness-richness_pre)/richness_pre*100) %>% 
  ggplot(aes(rel_year, rel_richness, col = delta_ba)) +
  geom_line(aes(group = paste(site, plot))) +
  geom_point() +
  theme_bw() +
  scale_color_viridis_c(expression(Delta[BA])) +
  xlab("") + 
  ylab(expression(Delta[richness])) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_vline(xintercept = 15, linetype = "dashed", col = "red")
```

## Logging

> Logging intensity: % basal area or volume lost (see metadata table)

**To discuss.** The available information might be very different depending on the site. The presence of pre-exploitation census will be a big difference to have an idea of pre and post harvest basal area, aboveground biomass, number of trees etc. Some sites may have only blur metadata. And some sites may have inventories of harvested trees with detailed information.

## Other plots infos

> Wherever available: liana infestation index, invasive species, etc. 

**To discuss.** I have currently no clue of what could be available.

## Landscape

> Landscape variables: forest cover, etc. 

We can take advantage of the Tropical Moist Forest (TMF) product from the European Joint Research Centre (JRC) to asses forest surface evolution around forests at 30-m and yearly resolutions but only from 1990. Simple hypotheses or other products could be used for censuses before 1990. For instance for the Paracou inventory in 2016:

```{r landscape_data}
#| message: false
#| warning: false
#| fig-cap: "Example of TMF data for 2016 at 5-km around the Paracou research station. Green area are intact forests, the black point the Paracou research station, and the black circle an exemple of a 1-km buffer around the station that could be used to compute landscape metrics."
sites <- tibble(
  site = c("Paracou"),
  latitude = c(5.27877),
  longitude = c(-52.92486),
) %>% 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
buffer <- sites %>% 
  st_buffer(5*10^3)
fc <- rast("data/JRC_TMF_AnnualChange_v1_2016_SAM_ID49_N10_W60.tif") %>% 
  crop(buffer)
fc <- (fc == 1)
ggplot() +
  tidyterra::geom_spatraster(data = fc) +
  geom_sf(data = sites, fill = NA, col = "black", linewidth = .8) +
  geom_sf(data = sites %>% st_buffer(1*10^3),
          fill = NA, col = "black", linewidth = .8, linetype = 'dashed') +
  theme_bw() +
  scale_fill_manual("Forest", values = c("grey", "#48712d"))
```

## Abiotic

> Climate, soil, other disturbances (storms, fire, droughts).

### Climate

The climate could be explored with means over the censuses period or annually, but I think here we seek for mean effect of the site climatic condition pointing the former. Many climate products exists with different spatial and temporal resolution and different data origins and reanalyses methods. If we are looking for mean climates I would advise to use bioclimatic variables from CHELSA 2 (<https://chelsa-climate.org/>).

> [**CHELSA V2.1.1**](https://chelsa-climate.org/)**: Climatologies at high resolution for the earth’s land surface areas**
>
> *CHELSA (Climatologies at high resolution for the earth’s land surface areas) is a very high resolution (30 arc sec, \~1km) global downscaled climate data set currently hosted by the Swiss Federal Institute for Forest, Snow and Landscape Research WSL. It is built to provide free access to high resolution climate data for research and application, and is constantly updated and refined.*

```{r clim_data}
#| message: false
#| warning: false
#| fig-cap: "Example of CHELSA 2 data for the Paracou research station."
rast("data/French-Guiana_chelsa2_monthly-means_1980-2005.nc") %>% 
  extract(sites) %>% 
  gather() %>% 
  filter(key != "ID") %>% 
  separate(key, c("variable", "month"), "_month=") %>% 
  pivot_wider(names_from = variable, values_from = value) %>% 
  mutate(month = as.numeric(month)) %>% 
  ggplot(aes(x = month)) +
  geom_col(aes(y = pr/20), fill = "grey", col = NA) +
  geom_line(aes(y = tas, col = "mean")) +
  geom_line(aes(y = tasmax, col = "maximum")) +
  geom_line(aes(y = tasmin, col = "minimum")) +
  theme_bw() +
  xlab("") + 
  scale_x_continuous(breaks = 1:12,
                     labels = c("J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D")) +
  scale_y_continuous(
    name = "Temperature (°C)",
    sec.axis = sec_axis(trans = ~.*20, name = "Precipitation (mm)")
  ) +
  theme(
    axis.title.y = element_text(color = "black"),
    axis.title.y.right = element_text(color = "grey")
  ) +
  scale_color_discrete("") +
  theme(legend.position = "bottom")
```

### Soil

In case local data are available for soil they should be preferred. However we can take advantage of public reanalyses such as SoilGrids (<https://soilgrids.org/>).

```{r soil_data}
#| message: false
#| warning: false
tibble(
  site = c("Paracou"),
  silt = c(13.25),
  clay = c(21.5),
  sand = c(63.25)
) %>% knitr::kable()
```

### Disturbances

For fires we could use remotely sensed products such as "MODIS ACTIVE FIRE AND BURNED AREA PRODUCTS": <https://modis-fire.umd.edu/>. Regarding storms, drought, etc I have no clue yet and should explore them.

## Functional traits

Functional traits could be gathered from:

-   Local site data (e.g. I already have some for French Guiana, Santarem, and Uppangala)
-   Published data
-   Public data store, e.g. TRY

For instance, here is a recent functional traits data gathering and imputation that I have done for Santarem and Paracou: <https://sylvainschmitt.github.io/troll_eval/12_species.html>.

```{r data_fun}
#| fig-cap: "Functional composition estimated by TROLL at the Paracou and Tapajos site expressed in terms of distribution per trait and site."
knitr::include_graphics("https://sylvainschmitt.github.io/troll_eval/98_companion_figures_files/figure-html/ft-1.png")
```

## Phylogeny

We can take advantage of the backbone phylogeny of two recently published mega-trees [@smith2018; @zanne2013] using the V.PhyloMaker R package [@jin2019] to build a phylogeny of studied species in case we want to add phylogenetic contrasts in our analyses. For instance, here is a phylogeny I build to look at species growth patterns in Paracou [@schmitt2023]:

```{r data_phylo}
#| fig-cap: "Variation in the growth potential of individuals and species as a function of neighbourhood crowding, taxonomic levels or across phylogeny. A. Individual growth potential (Gmaxi) is significantly decreasing with neighbourhood crowding index (NCI, =-0.99, p<0.001, R2=0.102). B. The variation of individual growth potential (Gmaxi) across taxonomy show most of the variation at the individual (=0.45, Tab. 1), then explained by genus (=0.09) before species (=0.04) and family (=0.06). C. The distribution of species growth potential (Median[Gmaxi]) across the phylogeny from slow growing species in dark blue to fast growing species in yellow (log-scale) is phylogenetically structured (Pagel’s =0.78, p<0.001) with a significant positive autocorrelation to a phylogenetic partistic distance below 100 (Fig. S2), corresponding to the genus level (Tab. 1)."
knitr::include_graphics("https://raw.githubusercontent.com/sylvainschmitt/treegrowth/main/docs/treegrowth_files/figure-html/figall-1.png")
```
